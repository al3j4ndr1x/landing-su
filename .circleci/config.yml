# Use the latest 2.1 version of CircleCI pipeline processing engine
version: 2.1 # use CircleCI 2.1

executors:
  default:
    working_directory: ~/repo
    docker: # run the steps with Docker
      - image: circleci/node:15-browsers
        environment:
          ## this enables colors in the output
          TERM: xterm
jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point
    executor: default
    steps: # a collection of executable commands
      - checkout # special step to check out source code to working directory
      - run:
          name: Code Has Arrived âœ¨
          command: |
            ls -al
            echo 'The working directory after check out source code'
      - run:
          name: Running in a Unique Container
          command: |
            node -v
      - run:
          name: Updating npm at latest
          command: 'sudo npm install -g npm@latest'

      - run:
          name: Loading environment variables
          command: bash ./deploy_config.sh

      - restore_cache: # special step to restore the dependency cache
          keys:
            - v5.2-node-dependencies-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - v5.2-node-dependencies-{{ .Branch }}
            - v5.2-node-dependencies-

      - run:
          name: Installing Dependencies ðŸ“¦
          command: npm ci

      # - run:
      #     name: Installing Google Cloud Functions Dependencies
      #     command: cd functions && npm ci

      - run:
          name: Verifying Cypress ðŸŒ²
          command: npm run cy:verify

      - save_cache: # special step to save the dependency cache
          # cache NPM modules and the folder with the Cypress binary
          paths:
            - ./node_modules
            #- functions/node_modules
            - ~/.npm
            - ~/.cache
            #- package-lock.json
            #- package.json
            #- firebase.json
            #- .firebaserc
            #- firestore.rules
            #- firestore.indexes.json
          key: v5.2-node-dependencies-{{ .Branch }}-{{ checksum "package-lock.json" }}

      - persist_to_workspace:
          root: /home/circleci
          paths:
            - .
      - run:
          name: Finally the working directory after build steps
          command: |
            ls -al
            echo 'The working directory after build steps'
  test:
    executor: default
    parallelism: 1
    steps:
      - attach_workspace:
          at: /home/circleci
      # start server before starting tests
      #- run:
      #    name: Starting server before starting tests
      #    command: npm start # & wait-on http://localhost:4200
      #    background: true

      # - run:
      #     name: Split tests glob pattern
      #     command: |
      #       echo $(circleci tests glob "src/app/*.spec.ts" "src/app/auth/**/*.spec.ts" "src/app/**/*[!service].spec.ts")
      #       circleci tests glob "src/app/*.spec.ts" "src/app/auth/**/*.spec.ts" "src/app/**/*[!service].spec.ts" | xargs -n 1 echo
      - run:
          name: Running Unit Tests with Jest and collecting coverage reports for Coveralls ðŸ§ª
          command: npm run test:cov

      - store_test_results:
          path: ./coverage
      - store_artifacts:
          path: ./coverage
          destination: coverage

      - run:
          name: Finally the working directory after unit tests steps
          command: |
            ls -al
            echo 'The working directory after unit tests'

  test_e2e:
    executor: default
    parallelism: 1
    steps:
      - attach_workspace:
          at: /home/circleci
      - run:
          name: Running End-to-End Tests and recording with Cypress ðŸ§ª
          command: npm run e2e:ci

      # - store_test_results:
      #     path: ./cypress-coverage
      # - store_artifacts:
      #     path: ./cypress-coverage
      #     destination: cypress-coverage
      # # print code coverage summary to the terminal
      # - run: npm run cov:report

      # - persist_to_workspace:
      #     root: /home/circleci
      #     paths: .

      - run:
          name: Finally the working directory after e2e test steps
          command: |
            ls -al
            echo 'The working directory after e2e test'

  test_e2e_staging:
    executor: default
    parallelism: 3
    steps:
      - attach_workspace:
          at: /home/circleci
      # runs Cypress test in load balancing (parallel) mode
      # and groups them in Cypress Dashboard under name "electron-3x"
      - run:
          name: Running End-to-End Tests and recording with Cypress in Staging mode ðŸ§ª
          command: npm run e2e:ci:staging

      #- store_test_results:
      #    path: e2e-results
      - store_artifacts:
          path: cypress/videos
      - store_artifacts:
          path: cypress/screenshots
      # - store_test_results:
      #     path: ./cypress-coverage
      # - store_artifacts:
      #     path: ./cypress-coverage
      #     destination: cypress-coverage
      # # print code coverage summary to the terminal
      # - run: npm run cov:report

      # - persist_to_workspace:
      #     root: /home/circleci
      #     paths: .

      - run:
          name: Finally the working directory after e2e test step in Staging mode
          command: |
            ls -al
            echo 'The working directory after e2e test step'

  deploy_staging:
    executor: default
    steps:
      - attach_workspace:
          at: /home/circleci

      - run:
          name: Show current branch
          command: echo ${CIRCLE_BRANCH}
      - run:
          name: Building branch to staging
          command: npm run build:staging

      - run:
          name: Deploying branch to Firebase staging hosting ðŸŽ‰
          command: |
            ./node_modules/.bin/firebase deploy -m "Staging deployed with CircleCI." \
            --only hosting \
            --project $FIREBASE_STAGING_PROJECT_ID \
            --token=$FIREBASE_DEPLOY_TOKEN

  deploy_production:
    executor: default
    steps:
      - attach_workspace:
          at: /home/circleci

      - run:
          name: Show current branch
          command: echo ${CIRCLE_BRANCH}
      - run:
          name: Building main to production
          command: npm run build:prod

      - run:
          name: Deploying main to Firebase ðŸš€
          command: |
            ./node_modules/.bin/firebase deploy -m "Deployed with CircleCI." \
            --only hosting \
            --project $FIREBASE_PROJECT_ALIAS \
            --token=$FIREBASE_DEPLOY_TOKEN

# Orchestrate or schedule a set of jobs
workflows:
  version: 2
  build_test_and_deploy:
    jobs:
      - build:
          filters:
            branches:
              only:
                - main
                - develop
                - /release-.*/
                - /feature-.*/
                - /issue-.*/
                - /bugfix-.*/
                - /hotfix-.*/
                - /docs-.*/
                - /chore-.*/
                - /perf-.*/
                - /experiment-.*/
            tags:
              only: /^v.*/
      - test:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
      - test_e2e_staging:
          requires:
            - test
          filters:
            branches:
              only:
                #- main
                - develop
                - /release-.*/
                - /feature-.*/
                - /issue-.*/
                - /bugfix-.*/
                - /hotfix-.*/
                - /docs-.*/
                - /chore-.*/
                - /perf-.*/
                - /experiment-.*/

      # - test_e2e:
      #     requires:
      #       - test
      #     filters:
      #       branches:
      #         only:
      #           - main

      - deploy_staging:
          requires:
            - test_e2e_staging
          filters:
            branches:
              only:
                - /release-.*/

      - hold: # A job that will require manual approval in the CircleCI web application.
          type: approval # This key-value pair will set my workflow to a status of "On Hold"
          requires: # We only run the "hold" job when test has succeeded
            - test
          filters:  # using regex filters requires the entire branch to match
            tags:
              only: /^v.*/
            branches:
              only:  # only branches matching the below regex filters will run
                - main
      # - deploy_production:
      #     requires:
      #       - test #_e2e
      #     filters:  # using regex filters requires the entire branch to match
      #       branches:
      #         only:  # only branches matching the below regex filters will run
      #           - main
      # On approval of the `hold` job, any successive job that requires the `hold` job will run.
      # In this case, a user is manually triggering the deploy job.
      - deploy_production:
          requires:
            - hold
